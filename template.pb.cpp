// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "template.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace temp {

namespace {

const ::google::protobuf::Descriptor* Template2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Template2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Template1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Template1_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeatTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeatTemplate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BeatTemplate_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Template_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Template_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_template_2eproto() {
  protobuf_AddDesc_template_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "template.proto");
  GOOGLE_CHECK(file != NULL);
  Template2_descriptor_ = file->message_type(0);
  static const int Template2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template2, positions_of_beats_),
  };
  Template2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Template2_descriptor_,
      Template2::default_instance_,
      Template2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Template2));
  Template1_descriptor_ = file->message_type(1);
  static const int Template1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template1, template2s_),
  };
  Template1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Template1_descriptor_,
      Template1::default_instance_,
      Template1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Template1));
  BeatTemplate_descriptor_ = file->message_type(2);
  static const int BeatTemplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeatTemplate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeatTemplate, template1s_),
  };
  BeatTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeatTemplate_descriptor_,
      BeatTemplate::default_instance_,
      BeatTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeatTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeatTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeatTemplate));
  BeatTemplate_TYPE_descriptor_ = BeatTemplate_descriptor_->enum_type(0);
  Template_descriptor_ = file->message_type(3);
  static const int Template_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, beat_templates_),
  };
  Template_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Template_descriptor_,
      Template::default_instance_,
      Template_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Template));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_template_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Template2_descriptor_, &Template2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Template1_descriptor_, &Template1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeatTemplate_descriptor_, &BeatTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Template_descriptor_, &Template::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_template_2eproto() {
  delete Template2::default_instance_;
  delete Template2_reflection_;
  delete Template1::default_instance_;
  delete Template1_reflection_;
  delete BeatTemplate::default_instance_;
  delete BeatTemplate_reflection_;
  delete Template::default_instance_;
  delete Template_reflection_;
}

void protobuf_AddDesc_template_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016template.proto\022\004temp\"3\n\tTemplate2\022\n\n\002i"
    "d\030\001 \001(\r\022\032\n\022positions_of_beats\030\002 \003(\r\"<\n\tT"
    "emplate1\022\n\n\002id\030\001 \001(\r\022#\n\ntemplate2s\030\002 \003(\013"
    "2\017.temp.Template2\"\205\001\n\014BeatTemplate\022%\n\004ty"
    "pe\030\001 \002(\0162\027.temp.BeatTemplate.TYPE\022#\n\ntem"
    "plate1s\030\002 \003(\0132\017.temp.Template1\")\n\004TYPE\022\005"
    "\n\001N\020\001\022\005\n\001V\020\005\022\005\n\001S\020\t\022\005\n\001A\020\r\022\005\n\001D\020\024\"6\n\010Tem"
    "plate\022*\n\016beat_templates\030\001 \003(\0132\022.temp.Bea"
    "tTemplateB\031\n\020com.healthme.ecgB\005Templ", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "template.proto", &protobuf_RegisterTypes);
  Template2::default_instance_ = new Template2();
  Template1::default_instance_ = new Template1();
  BeatTemplate::default_instance_ = new BeatTemplate();
  Template::default_instance_ = new Template();
  Template2::default_instance_->InitAsDefaultInstance();
  Template1::default_instance_->InitAsDefaultInstance();
  BeatTemplate::default_instance_->InitAsDefaultInstance();
  Template::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_template_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_template_2eproto {
  StaticDescriptorInitializer_template_2eproto() {
    protobuf_AddDesc_template_2eproto();
  }
} static_descriptor_initializer_template_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Template2::kIdFieldNumber;
const int Template2::kPositionsOfBeatsFieldNumber;
#endif  // !_MSC_VER

Template2::Template2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:temp.Template2)
}

void Template2::InitAsDefaultInstance() {
}

Template2::Template2(const Template2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:temp.Template2)
}

void Template2::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Template2::~Template2() {
  // @@protoc_insertion_point(destructor:temp.Template2)
  SharedDtor();
}

void Template2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Template2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Template2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Template2_descriptor_;
}

const Template2& Template2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Template2* Template2::default_instance_ = NULL;

Template2* Template2::New() const {
  return new Template2;
}

void Template2::Clear() {
  id_ = 0u;
  positions_of_beats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Template2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:temp.Template2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_positions_of_beats;
        break;
      }

      // repeated uint32 positions_of_beats = 2;
      case 2: {
        if (tag == 16) {
         parse_positions_of_beats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_positions_of_beats())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_positions_of_beats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_positions_of_beats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:temp.Template2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:temp.Template2)
  return false;
#undef DO_
}

void Template2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:temp.Template2)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 positions_of_beats = 2;
  for (int i = 0; i < this->positions_of_beats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->positions_of_beats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:temp.Template2)
}

::google::protobuf::uint8* Template2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:temp.Template2)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 positions_of_beats = 2;
  for (int i = 0; i < this->positions_of_beats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->positions_of_beats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:temp.Template2)
  return target;
}

int Template2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 positions_of_beats = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->positions_of_beats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->positions_of_beats(i));
    }
    total_size += 1 * this->positions_of_beats_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Template2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Template2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Template2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Template2::MergeFrom(const Template2& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_of_beats_.MergeFrom(from.positions_of_beats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Template2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Template2::CopyFrom(const Template2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template2::IsInitialized() const {

  return true;
}

void Template2::Swap(Template2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    positions_of_beats_.Swap(&other->positions_of_beats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Template2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Template2_descriptor_;
  metadata.reflection = Template2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Template1::kIdFieldNumber;
const int Template1::kTemplate2SFieldNumber;
#endif  // !_MSC_VER

Template1::Template1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:temp.Template1)
}

void Template1::InitAsDefaultInstance() {
}

Template1::Template1(const Template1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:temp.Template1)
}

void Template1::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Template1::~Template1() {
  // @@protoc_insertion_point(destructor:temp.Template1)
  SharedDtor();
}

void Template1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Template1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Template1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Template1_descriptor_;
}

const Template1& Template1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Template1* Template1::default_instance_ = NULL;

Template1* Template1::New() const {
  return new Template1;
}

void Template1::Clear() {
  id_ = 0u;
  template2s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Template1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:temp.Template1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template2s;
        break;
      }

      // repeated .temp.Template2 template2s = 2;
      case 2: {
        if (tag == 18) {
         parse_template2s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_template2s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template2s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:temp.Template1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:temp.Template1)
  return false;
#undef DO_
}

void Template1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:temp.Template1)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .temp.Template2 template2s = 2;
  for (int i = 0; i < this->template2s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->template2s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:temp.Template1)
}

::google::protobuf::uint8* Template1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:temp.Template1)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .temp.Template2 template2s = 2;
  for (int i = 0; i < this->template2s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->template2s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:temp.Template1)
  return target;
}

int Template1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .temp.Template2 template2s = 2;
  total_size += 1 * this->template2s_size();
  for (int i = 0; i < this->template2s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->template2s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Template1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Template1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Template1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Template1::MergeFrom(const Template1& from) {
  GOOGLE_CHECK_NE(&from, this);
  template2s_.MergeFrom(from.template2s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Template1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Template1::CopyFrom(const Template1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template1::IsInitialized() const {

  return true;
}

void Template1::Swap(Template1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    template2s_.Swap(&other->template2s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Template1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Template1_descriptor_;
  metadata.reflection = Template1_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BeatTemplate_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeatTemplate_TYPE_descriptor_;
}
bool BeatTemplate_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
    case 9:
    case 13:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BeatTemplate_TYPE BeatTemplate::N;
const BeatTemplate_TYPE BeatTemplate::V;
const BeatTemplate_TYPE BeatTemplate::S;
const BeatTemplate_TYPE BeatTemplate::A;
const BeatTemplate_TYPE BeatTemplate::D;
const BeatTemplate_TYPE BeatTemplate::TYPE_MIN;
const BeatTemplate_TYPE BeatTemplate::TYPE_MAX;
const int BeatTemplate::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BeatTemplate::kTypeFieldNumber;
const int BeatTemplate::kTemplate1SFieldNumber;
#endif  // !_MSC_VER

BeatTemplate::BeatTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:temp.BeatTemplate)
}

void BeatTemplate::InitAsDefaultInstance() {
}

BeatTemplate::BeatTemplate(const BeatTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:temp.BeatTemplate)
}

void BeatTemplate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeatTemplate::~BeatTemplate() {
  // @@protoc_insertion_point(destructor:temp.BeatTemplate)
  SharedDtor();
}

void BeatTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeatTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeatTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeatTemplate_descriptor_;
}

const BeatTemplate& BeatTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

BeatTemplate* BeatTemplate::default_instance_ = NULL;

BeatTemplate* BeatTemplate::New() const {
  return new BeatTemplate;
}

void BeatTemplate::Clear() {
  type_ = 1;
  template1s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeatTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:temp.BeatTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .temp.BeatTemplate.TYPE type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::temp::BeatTemplate_TYPE_IsValid(value)) {
            set_type(static_cast< ::temp::BeatTemplate_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template1s;
        break;
      }

      // repeated .temp.Template1 template1s = 2;
      case 2: {
        if (tag == 18) {
         parse_template1s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_template1s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template1s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:temp.BeatTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:temp.BeatTemplate)
  return false;
#undef DO_
}

void BeatTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:temp.BeatTemplate)
  // required .temp.BeatTemplate.TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .temp.Template1 template1s = 2;
  for (int i = 0; i < this->template1s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->template1s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:temp.BeatTemplate)
}

::google::protobuf::uint8* BeatTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:temp.BeatTemplate)
  // required .temp.BeatTemplate.TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .temp.Template1 template1s = 2;
  for (int i = 0; i < this->template1s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->template1s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:temp.BeatTemplate)
  return target;
}

int BeatTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .temp.BeatTemplate.TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .temp.Template1 template1s = 2;
  total_size += 1 * this->template1s_size();
  for (int i = 0; i < this->template1s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->template1s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeatTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeatTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeatTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeatTemplate::MergeFrom(const BeatTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  template1s_.MergeFrom(from.template1s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeatTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeatTemplate::CopyFrom(const BeatTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatTemplate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BeatTemplate::Swap(BeatTemplate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    template1s_.Swap(&other->template1s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeatTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeatTemplate_descriptor_;
  metadata.reflection = BeatTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Template::kBeatTemplatesFieldNumber;
#endif  // !_MSC_VER

Template::Template()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:temp.Template)
}

void Template::InitAsDefaultInstance() {
}

Template::Template(const Template& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:temp.Template)
}

void Template::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Template::~Template() {
  // @@protoc_insertion_point(destructor:temp.Template)
  SharedDtor();
}

void Template::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Template::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Template::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Template_descriptor_;
}

const Template& Template::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Template* Template::default_instance_ = NULL;

Template* Template::New() const {
  return new Template;
}

void Template::Clear() {
  beat_templates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Template::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:temp.Template)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .temp.BeatTemplate beat_templates = 1;
      case 1: {
        if (tag == 10) {
         parse_beat_templates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beat_templates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_beat_templates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:temp.Template)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:temp.Template)
  return false;
#undef DO_
}

void Template::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:temp.Template)
  // repeated .temp.BeatTemplate beat_templates = 1;
  for (int i = 0; i < this->beat_templates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beat_templates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:temp.Template)
}

::google::protobuf::uint8* Template::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:temp.Template)
  // repeated .temp.BeatTemplate beat_templates = 1;
  for (int i = 0; i < this->beat_templates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beat_templates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:temp.Template)
  return target;
}

int Template::ByteSize() const {
  int total_size = 0;

  // repeated .temp.BeatTemplate beat_templates = 1;
  total_size += 1 * this->beat_templates_size();
  for (int i = 0; i < this->beat_templates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beat_templates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Template::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Template* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Template*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Template::MergeFrom(const Template& from) {
  GOOGLE_CHECK_NE(&from, this);
  beat_templates_.MergeFrom(from.beat_templates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Template::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Template::CopyFrom(const Template& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->beat_templates())) return false;
  return true;
}

void Template::Swap(Template* other) {
  if (other != this) {
    beat_templates_.Swap(&other->beat_templates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Template::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Template_descriptor_;
  metadata.reflection = Template_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace temp

// @@protoc_insertion_point(global_scope)
