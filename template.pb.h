// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template.proto

#ifndef PROTOBUF_template_2eproto__INCLUDED
#define PROTOBUF_template_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace temp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_template_2eproto();
void protobuf_AssignDesc_template_2eproto();
void protobuf_ShutdownFile_template_2eproto();

class Template2;
class Template1;
class BeatTemplate;
class Template;

enum BeatTemplate_TYPE {
  BeatTemplate_TYPE_N = 1,
  BeatTemplate_TYPE_V = 5,
  BeatTemplate_TYPE_S = 9,
  BeatTemplate_TYPE_A = 13,
  BeatTemplate_TYPE_D = 20
};
bool BeatTemplate_TYPE_IsValid(int value);
const BeatTemplate_TYPE BeatTemplate_TYPE_TYPE_MIN = BeatTemplate_TYPE_N;
const BeatTemplate_TYPE BeatTemplate_TYPE_TYPE_MAX = BeatTemplate_TYPE_D;
const int BeatTemplate_TYPE_TYPE_ARRAYSIZE = BeatTemplate_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeatTemplate_TYPE_descriptor();
inline const ::std::string& BeatTemplate_TYPE_Name(BeatTemplate_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeatTemplate_TYPE_descriptor(), value);
}
inline bool BeatTemplate_TYPE_Parse(
    const ::std::string& name, BeatTemplate_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeatTemplate_TYPE>(
    BeatTemplate_TYPE_descriptor(), name, value);
}
// ===================================================================

class Template2 : public ::google::protobuf::Message {
 public:
  Template2();
  virtual ~Template2();

  Template2(const Template2& from);

  inline Template2& operator=(const Template2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Template2& default_instance();

  void Swap(Template2* other);

  // implements Message ----------------------------------------------

  Template2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Template2& from);
  void MergeFrom(const Template2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 positions_of_beats = 2;
  inline int positions_of_beats_size() const;
  inline void clear_positions_of_beats();
  static const int kPositionsOfBeatsFieldNumber = 2;
  inline ::google::protobuf::uint32 positions_of_beats(int index) const;
  inline void set_positions_of_beats(int index, ::google::protobuf::uint32 value);
  inline void add_positions_of_beats(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      positions_of_beats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_positions_of_beats();

  // @@protoc_insertion_point(class_scope:temp.Template2)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > positions_of_beats_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_template_2eproto();
  friend void protobuf_AssignDesc_template_2eproto();
  friend void protobuf_ShutdownFile_template_2eproto();

  void InitAsDefaultInstance();
  static Template2* default_instance_;
};
// -------------------------------------------------------------------

class Template1 : public ::google::protobuf::Message {
 public:
  Template1();
  virtual ~Template1();

  Template1(const Template1& from);

  inline Template1& operator=(const Template1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Template1& default_instance();

  void Swap(Template1* other);

  // implements Message ----------------------------------------------

  Template1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Template1& from);
  void MergeFrom(const Template1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .temp.Template2 template2s = 2;
  inline int template2s_size() const;
  inline void clear_template2s();
  static const int kTemplate2SFieldNumber = 2;
  inline const ::temp::Template2& template2s(int index) const;
  inline ::temp::Template2* mutable_template2s(int index);
  inline ::temp::Template2* add_template2s();
  inline const ::google::protobuf::RepeatedPtrField< ::temp::Template2 >&
      template2s() const;
  inline ::google::protobuf::RepeatedPtrField< ::temp::Template2 >*
      mutable_template2s();

  // @@protoc_insertion_point(class_scope:temp.Template1)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::temp::Template2 > template2s_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_template_2eproto();
  friend void protobuf_AssignDesc_template_2eproto();
  friend void protobuf_ShutdownFile_template_2eproto();

  void InitAsDefaultInstance();
  static Template1* default_instance_;
};
// -------------------------------------------------------------------

class BeatTemplate : public ::google::protobuf::Message {
 public:
  BeatTemplate();
  virtual ~BeatTemplate();

  BeatTemplate(const BeatTemplate& from);

  inline BeatTemplate& operator=(const BeatTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeatTemplate& default_instance();

  void Swap(BeatTemplate* other);

  // implements Message ----------------------------------------------

  BeatTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeatTemplate& from);
  void MergeFrom(const BeatTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BeatTemplate_TYPE TYPE;
  static const TYPE N = BeatTemplate_TYPE_N;
  static const TYPE V = BeatTemplate_TYPE_V;
  static const TYPE S = BeatTemplate_TYPE_S;
  static const TYPE A = BeatTemplate_TYPE_A;
  static const TYPE D = BeatTemplate_TYPE_D;
  static inline bool TYPE_IsValid(int value) {
    return BeatTemplate_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    BeatTemplate_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    BeatTemplate_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    BeatTemplate_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return BeatTemplate_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return BeatTemplate_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return BeatTemplate_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .temp.BeatTemplate.TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::temp::BeatTemplate_TYPE type() const;
  inline void set_type(::temp::BeatTemplate_TYPE value);

  // repeated .temp.Template1 template1s = 2;
  inline int template1s_size() const;
  inline void clear_template1s();
  static const int kTemplate1SFieldNumber = 2;
  inline const ::temp::Template1& template1s(int index) const;
  inline ::temp::Template1* mutable_template1s(int index);
  inline ::temp::Template1* add_template1s();
  inline const ::google::protobuf::RepeatedPtrField< ::temp::Template1 >&
      template1s() const;
  inline ::google::protobuf::RepeatedPtrField< ::temp::Template1 >*
      mutable_template1s();

  // @@protoc_insertion_point(class_scope:temp.BeatTemplate)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::temp::Template1 > template1s_;
  int type_;
  friend void  protobuf_AddDesc_template_2eproto();
  friend void protobuf_AssignDesc_template_2eproto();
  friend void protobuf_ShutdownFile_template_2eproto();

  void InitAsDefaultInstance();
  static BeatTemplate* default_instance_;
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  void Swap(Template* other);

  // implements Message ----------------------------------------------

  Template* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .temp.BeatTemplate beat_templates = 1;
  inline int beat_templates_size() const;
  inline void clear_beat_templates();
  static const int kBeatTemplatesFieldNumber = 1;
  inline const ::temp::BeatTemplate& beat_templates(int index) const;
  inline ::temp::BeatTemplate* mutable_beat_templates(int index);
  inline ::temp::BeatTemplate* add_beat_templates();
  inline const ::google::protobuf::RepeatedPtrField< ::temp::BeatTemplate >&
      beat_templates() const;
  inline ::google::protobuf::RepeatedPtrField< ::temp::BeatTemplate >*
      mutable_beat_templates();

  // @@protoc_insertion_point(class_scope:temp.Template)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::temp::BeatTemplate > beat_templates_;
  friend void  protobuf_AddDesc_template_2eproto();
  friend void protobuf_AssignDesc_template_2eproto();
  friend void protobuf_ShutdownFile_template_2eproto();

  void InitAsDefaultInstance();
  static Template* default_instance_;
};
// ===================================================================


// ===================================================================

// Template2

// optional uint32 id = 1;
inline bool Template2::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Template2::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Template2::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Template2::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Template2::id() const {
  // @@protoc_insertion_point(field_get:temp.Template2.id)
  return id_;
}
inline void Template2::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:temp.Template2.id)
}

// repeated uint32 positions_of_beats = 2;
inline int Template2::positions_of_beats_size() const {
  return positions_of_beats_.size();
}
inline void Template2::clear_positions_of_beats() {
  positions_of_beats_.Clear();
}
inline ::google::protobuf::uint32 Template2::positions_of_beats(int index) const {
  // @@protoc_insertion_point(field_get:temp.Template2.positions_of_beats)
  return positions_of_beats_.Get(index);
}
inline void Template2::set_positions_of_beats(int index, ::google::protobuf::uint32 value) {
  positions_of_beats_.Set(index, value);
  // @@protoc_insertion_point(field_set:temp.Template2.positions_of_beats)
}
inline void Template2::add_positions_of_beats(::google::protobuf::uint32 value) {
  positions_of_beats_.Add(value);
  // @@protoc_insertion_point(field_add:temp.Template2.positions_of_beats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Template2::positions_of_beats() const {
  // @@protoc_insertion_point(field_list:temp.Template2.positions_of_beats)
  return positions_of_beats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Template2::mutable_positions_of_beats() {
  // @@protoc_insertion_point(field_mutable_list:temp.Template2.positions_of_beats)
  return &positions_of_beats_;
}

// -------------------------------------------------------------------

// Template1

// optional uint32 id = 1;
inline bool Template1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Template1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Template1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Template1::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Template1::id() const {
  // @@protoc_insertion_point(field_get:temp.Template1.id)
  return id_;
}
inline void Template1::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:temp.Template1.id)
}

// repeated .temp.Template2 template2s = 2;
inline int Template1::template2s_size() const {
  return template2s_.size();
}
inline void Template1::clear_template2s() {
  template2s_.Clear();
}
inline const ::temp::Template2& Template1::template2s(int index) const {
  // @@protoc_insertion_point(field_get:temp.Template1.template2s)
  return template2s_.Get(index);
}
inline ::temp::Template2* Template1::mutable_template2s(int index) {
  // @@protoc_insertion_point(field_mutable:temp.Template1.template2s)
  return template2s_.Mutable(index);
}
inline ::temp::Template2* Template1::add_template2s() {
  // @@protoc_insertion_point(field_add:temp.Template1.template2s)
  return template2s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::temp::Template2 >&
Template1::template2s() const {
  // @@protoc_insertion_point(field_list:temp.Template1.template2s)
  return template2s_;
}
inline ::google::protobuf::RepeatedPtrField< ::temp::Template2 >*
Template1::mutable_template2s() {
  // @@protoc_insertion_point(field_mutable_list:temp.Template1.template2s)
  return &template2s_;
}

// -------------------------------------------------------------------

// BeatTemplate

// required .temp.BeatTemplate.TYPE type = 1;
inline bool BeatTemplate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeatTemplate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeatTemplate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeatTemplate::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::temp::BeatTemplate_TYPE BeatTemplate::type() const {
  // @@protoc_insertion_point(field_get:temp.BeatTemplate.type)
  return static_cast< ::temp::BeatTemplate_TYPE >(type_);
}
inline void BeatTemplate::set_type(::temp::BeatTemplate_TYPE value) {
  assert(::temp::BeatTemplate_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:temp.BeatTemplate.type)
}

// repeated .temp.Template1 template1s = 2;
inline int BeatTemplate::template1s_size() const {
  return template1s_.size();
}
inline void BeatTemplate::clear_template1s() {
  template1s_.Clear();
}
inline const ::temp::Template1& BeatTemplate::template1s(int index) const {
  // @@protoc_insertion_point(field_get:temp.BeatTemplate.template1s)
  return template1s_.Get(index);
}
inline ::temp::Template1* BeatTemplate::mutable_template1s(int index) {
  // @@protoc_insertion_point(field_mutable:temp.BeatTemplate.template1s)
  return template1s_.Mutable(index);
}
inline ::temp::Template1* BeatTemplate::add_template1s() {
  // @@protoc_insertion_point(field_add:temp.BeatTemplate.template1s)
  return template1s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::temp::Template1 >&
BeatTemplate::template1s() const {
  // @@protoc_insertion_point(field_list:temp.BeatTemplate.template1s)
  return template1s_;
}
inline ::google::protobuf::RepeatedPtrField< ::temp::Template1 >*
BeatTemplate::mutable_template1s() {
  // @@protoc_insertion_point(field_mutable_list:temp.BeatTemplate.template1s)
  return &template1s_;
}

// -------------------------------------------------------------------

// Template

// repeated .temp.BeatTemplate beat_templates = 1;
inline int Template::beat_templates_size() const {
  return beat_templates_.size();
}
inline void Template::clear_beat_templates() {
  beat_templates_.Clear();
}
inline const ::temp::BeatTemplate& Template::beat_templates(int index) const {
  // @@protoc_insertion_point(field_get:temp.Template.beat_templates)
  return beat_templates_.Get(index);
}
inline ::temp::BeatTemplate* Template::mutable_beat_templates(int index) {
  // @@protoc_insertion_point(field_mutable:temp.Template.beat_templates)
  return beat_templates_.Mutable(index);
}
inline ::temp::BeatTemplate* Template::add_beat_templates() {
  // @@protoc_insertion_point(field_add:temp.Template.beat_templates)
  return beat_templates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::temp::BeatTemplate >&
Template::beat_templates() const {
  // @@protoc_insertion_point(field_list:temp.Template.beat_templates)
  return beat_templates_;
}
inline ::google::protobuf::RepeatedPtrField< ::temp::BeatTemplate >*
Template::mutable_beat_templates() {
  // @@protoc_insertion_point(field_mutable_list:temp.Template.beat_templates)
  return &beat_templates_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace temp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::temp::BeatTemplate_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::temp::BeatTemplate_TYPE>() {
  return ::temp::BeatTemplate_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_template_2eproto__INCLUDED
